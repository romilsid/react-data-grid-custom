[{"C:\\Users\\rosiddhapu\\Documents\\react-data-grid-custom\\src\\index.js":"1","C:\\Users\\rosiddhapu\\Documents\\react-data-grid-custom\\src\\CustomDropDown\\CustomDropDown.js":"2","C:\\Users\\rosiddhapu\\Documents\\react-data-grid-custom\\src\\createRowData.js":"3","C:\\Users\\rosiddhapu\\Documents\\react-data-grid-custom\\src\\App.js":"4","C:\\Users\\rosiddhapu\\Documents\\react-data-grid-custom\\src\\CustomTextEditor\\CustomTextEditor.js":"5"},{"size":231,"mtime":1609359782000,"results":"6","hashOfConfig":"7"},{"size":737,"mtime":1610030765813,"results":"8","hashOfConfig":"7"},{"size":810,"mtime":1609862440948,"results":"9","hashOfConfig":"7"},{"size":6517,"mtime":1610048126550,"results":"10","hashOfConfig":"7"},{"size":654,"mtime":1609356222000,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"pb7v6r",{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\rosiddhapu\\Documents\\react-data-grid-custom\\src\\index.js",[],"C:\\Users\\rosiddhapu\\Documents\\react-data-grid-custom\\src\\CustomDropDown\\CustomDropDown.js",["24"],"import React, { useState } from \"react\";\r\nimport { Select } from \"@copart/core-components\";\r\n\r\nconst options = [\r\n  { key: \"Consultant\", text: \"Consultant\" },\r\n  { key: \"Officer\", text: \"Officer\" },\r\n  { key: \"Architect\", text: \"Architect\" }\r\n];\r\n\r\nconst CustomDropDown = (props) => {\r\n  const [value, setValue] = useState(props?.row?.jobType);\r\n  // console.log(pronops);\r\n  const onChangeHandler = (e, option) => {\r\n    setValue(option.key);\r\n    props.onChange(props, option.key);\r\n  };\r\n \r\n  return (\r\n    <Select\r\n      label=\"\"\r\n      options={props.optionsNeeded}\r\n      onChange={onChangeHandler}\r\n      placeholder={props.row[props.column.key]}\r\n      selectedOption={value}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CustomDropDown;\r\n","C:\\Users\\rosiddhapu\\Documents\\react-data-grid-custom\\src\\createRowData.js",[],"C:\\Users\\rosiddhapu\\Documents\\react-data-grid-custom\\src\\App.js",["25"],"import React, { useReducer, useState } from \"react\";\nimport DataGrid from \"react-data-grid\";\nimport DropDown from \"./CustomDropDown/CustomDropDown\";\n// import createRowData from \"./createRowData\";\nimport config from './config.json';\nimport {ContextMenu, MenuItem, SubMenu, ContextMenuTrigger } from 'react-contextmenu';\nimport {createPortal } from 'react-dom';\nimport './react-contextmenu.css';\nimport \"react-data-grid/dist/react-data-grid.css\";\nimport {Row as GridRow} from 'react-data-grid';\nimport './App.css';\n\n\n\nconst col = config.columns;\nconst meta = config.columnMetadata;\n\nfunction rowKeyGetter(row) {\n  return row.id;\n}\n\nconst currencyFormatter = new Intl.NumberFormat(navigator.language, {\n  style: \"currency\",\n  currency: \"usd\"\n});\n\nfunction CurrencyFormatter({ value }) {\n  return <>{currencyFormatter.format(value)}</>;\n}\n\nfunction autoFocus(input) {\n  input?.focus();\n}\n\nconst TextEditor = (props) => {\n  return (\n    <span>\n      <input ref = {autoFocus} type = \"text\" className=\"rdg-text-editor\" value={props.row[props.column.key]} onChange={(event) => props.onTextChange(event, props)} />\n    </span>\n  );\n}\n\nconst ContextTextEditor = (props) => {\n  return (\n    <span className=\"buttonInside\">\n      <input type=\"text\" className=\"rdg-text-editor\" value=\"Percent\" />\n      <button id=\"open\"><i className=\"fa fa-pencil\"></i></button>\n    </span>\n  );\n}\n\nconst App = () => {\n  const customRows = [\n    {\n      id : 1,\n      comments: \"Testing\",\n      membershipType: \"Premium\",\n      vehicleType: \"SUV\",\n      minSalePrice: 50,\n      maxSalePrice: 200,\n      pricingFunction: \"\",\n      pricingValue: \"\"\n    },\n    {\n      id : 2,\n      comments: \"Test\",\n      membershipType: \"Basic\",\n      vehicleType: \"Sedan\",\n      minSalePrice: 500,\n      maxSalePrice: 2000,\n      pricingFunction: \"\",\n      pricingValue: \"\"\n    },\n    {\n      id : 3,\n      comments: \"Testing done\",\n      membershipType: \"Medium\",\n      vehicleType: \"Coupe\",\n      minSalePrice: 500,\n      maxSalePrice: 2000,\n      pricingFunction: \"\",\n      pricingValue: \"\"\n    }\n  ];\n\n  const [rows, setRows] = useState(customRows);\n  // const [nextId, setNextId] = useReducer(id => id + 1, rows[rows.length - 1].id + 1);\n\n  const colus = col.map(c => {\n    const key = c.key;\n    const temp = Object.entries(meta).filter(entry => {\n      return entry[0] === key;\n    });\n    const obj = temp[0][1];\n    let add = {};\n    switch(obj.type) {\n\n      case \"Text\":\n        add = {\n          editor: (props) => (\n            <TextEditor {...props} onTextChange = {handleTextEditor} />\n          ),\n        }\n        break;\n\n      case \"DropDown\":\n        add = {\n          formatter : (props) => (\n          <DropDown {...props} optionsNeeded = {obj.options} onChange={handleDropDownChange}  />\n          ) \n        };\n        break;\n\n      case \"Currency\":\n        add = {\n          editor: (props) => (\n            <TextEditor {...props} onTextChange = {handleTextEditor} />\n          ),\n          formatter: (props) => {\n            return (\n            <CurrencyFormatter {...props} value={props.row[key]} />\n          )}\n        };\n        break;\n\n      case \"ContextMenu\": \n        add ={\n          formatter: (props) => (\n            <ContextTextEditor {...props} />\n          )\n        };\n        break;\n\n      default:\n        add = {};\n        break;\n\n    }\n    \n    const final = {\n      ...c,\n      ...add\n    };\n\n    return final;\n  });\n\n\n\n\n  const handleDropDownChange = (props, value) => {\n\n      const oldRows = [...rows];\n      oldRows.forEach((row) => {\n          if(row.id === props.row.id) {\n            row[props.column.key] = value;\n          }\n      });\n      \n      setRows(oldRows);\n  };\n\n  const handleTextEditor = (event, props) => {\n\n    const oldRows = [...rows];\n    oldRows.forEach((row) => {\n        if(row.id === props.row.id) {\n          row[props.column.key]= event.target.value;\n        }\n    });\n\n    setRows(oldRows);\n  }\n\n  const onGridRowsUpdated = ({ fromRow, toRow, updated }) => {\n\n    setRows((rows) => {\n      const updatedRows = rows.slice();\n      for (let i = fromRow; i <= toRow; i++) {\n        updatedRows[i] = { ...updatedRows[i], ...updated };\n      }\n      return { updatedRows };\n    });\n\n  };\n\n  function onRowDelete( event, obj) {\n    let updatedRows = [\n      ...rows.slice(0, obj.rowIdx),\n      ...rows.slice(obj.rowIdx + 1)\n    ];\n    setRows(updatedRows);\n    \n  }\n\n  function onRowInsertAbove( event, obj) {\n    insertRow(obj.rowIdx);\n  }\n\n  function onRowInsertBelow( event, obj) {\n    insertRow(obj.rowIdx + 1);\n  }\n\n  function insertRow(rowIdx) {\n    const newRow = [ ...rows.slice(rowIdx -1, rowIdx)];\n    let updatedRows = [\n      ...rows.slice(0, rowIdx),\n      ...newRow,\n      ...rows.slice(rowIdx)\n    ];\n    setRows(updatedRows);\n    // setNextId();  \n  }\n\n  function RowRenderer(props) {\n    return (\n      <ContextMenuTrigger id=\"grid-context-menu\" collect={() => ({rowIdx: props.rowIdx})} >\n        <GridRow {...props} />\n      </ContextMenuTrigger>\n    );\n  }\n\n  return (\n    <>\n      <DataGrid\n        rowKeyGetter={rowKeyGetter}\n        columns={colus}\n        rows={rows}\n        rowRenderer={RowRenderer}\n        className=\"fill-grid\"\n        onRowsChange={onGridRowsUpdated}\n      />\n\n      {createPortal(\n        <ContextMenu id=\"grid-context-menu\">\n          <MenuItem onClick={onRowDelete}>Delete Row</MenuItem>\n          <SubMenu title=\"Insert Row\">\n            <MenuItem onClick={onRowInsertAbove}>Above</MenuItem>\n            <MenuItem onClick={onRowInsertBelow}>Below</MenuItem>\n          </SubMenu>\n        </ContextMenu>,\n        document.body\n      )}\n    </>\n\n  );\n};\n\nexport default App;\n\n\n\n\n\n\n\n\n\n  // const columns = [\n  //   { key: \"id\", name: \"ID\" },\n  //   { key: \"lastName\", name: \"Last Name\", \n  //     editor: (props) => (\n  //       <TextEditor {...props} onTextChange = {handleTextEditor} />\n  //     )\n  //   },\n  //   {\n  //     key: \"currency\",\n  //     name: \"Currency\",\n  //     editor: (props) => (\n  //       <TextEditor {...props} onTextChange = {handleTextEditor} />\n  //     ),\n  //     formatter: (props) => (\n  //       <CurrencyFormatter {...props} value={props.row.currency} />\n  //     )\n  //   },\n  //   { key: \"jobTitle\", name: \"Job Title\" },\n  //   {\n  //     key: \"jobType\",\n  //     name: \"Job Type\",\n  //     editable: true,\n  //     resizable: true,\n  //     formatter: (props) => (\n  //       <DropDown {...props} op onChange={handleDropDownChange}  />\n  //     )\n  //   },\n  //   { key: \"phone\", name: \"Phone\" }\n  // ];\n","C:\\Users\\rosiddhapu\\Documents\\react-data-grid-custom\\src\\CustomTextEditor\\CustomTextEditor.js",["26"],{"ruleId":"27","severity":1,"message":"28","line":4,"column":7,"nodeType":"29","messageId":"30","endLine":4,"endColumn":14},{"ruleId":"27","severity":1,"message":"31","line":1,"column":17,"nodeType":"29","messageId":"30","endLine":1,"endColumn":27},{"ruleId":"27","severity":1,"message":"32","line":1,"column":17,"nodeType":"29","messageId":"30","endLine":1,"endColumn":25},"no-unused-vars","'options' is assigned a value but never used.","Identifier","unusedVar","'useReducer' is defined but never used.","'useState' is defined but never used."]